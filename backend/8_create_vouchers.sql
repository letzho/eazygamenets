BEGIN;



CREATE TABLE IF NOT EXISTS public.vouchers (
  id           integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id      integer NOT NULL,
  quantity     integer NOT NULL DEFAULT 0,
  total_earned integer NOT NULL DEFAULT 0,
  total_used   integer NOT NULL DEFAULT 0,
  created_at   timestamp WITHOUT TIME ZONE NOT NULL DEFAULT now(),
  updated_at   timestamp WITHOUT TIME ZONE NOT NULL DEFAULT now(),
  CONSTRAINT vouchers_nonneg_ck
    CHECK (quantity >= 0 AND total_earned >= 0 AND total_used >= 0),
  CONSTRAINT vouchers_user_unique UNIQUE (user_id)
);


DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM information_schema.tables
    WHERE table_schema='public' AND table_name='users'
  ) AND NOT EXISTS (
    SELECT 1 FROM pg_constraint WHERE conname='vouchers_user_id_fkey'
  ) THEN
    ALTER TABLE public.vouchers
      ADD CONSTRAINT vouchers_user_id_fkey
      FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;
  END IF;
END$$;


CREATE OR REPLACE FUNCTION public.set_timestamp()
RETURNS trigger LANGUAGE plpgsql AS $fn$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END
$fn$;

DROP TRIGGER IF EXISTS trg_vouchers_set_timestamp ON public.vouchers;
CREATE TRIGGER trg_vouchers_set_timestamp
BEFORE UPDATE ON public.vouchers
FOR EACH ROW EXECUTE FUNCTION public.set_timestamp();



COMMIT;
