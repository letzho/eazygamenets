BEGIN;


DROP TABLE IF EXISTS public.payments CASCADE;

CREATE TABLE public.payments (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id          integer REFERENCES public.users(id) ON DELETE SET NULL,
  txn_id           varchar(255) NOT NULL,            -- e.g. sandbox_nets|...
  retrieval_ref    varchar(255) NOT NULL,            -- e.g. jkaej0nvvjj_...
  amount           numeric(10,2) NOT NULL DEFAULT 0, -- shows (10,2) in UI
  payment_method   varchar(50)  NOT NULL,            -- ENETS / ENETS_QR / etc
  status           varchar(50)  NOT NULL DEFAULT 'pending',
  items            jsonb,                             -- optional payload
  created_at       timestamp without time zone NOT NULL DEFAULT NOW(),
  updated_at       timestamp without time zone NOT NULL DEFAULT NOW(),

  CONSTRAINT payments_txn_id_unique        UNIQUE (txn_id),
  CONSTRAINT payments_retrieval_ref_unique UNIQUE (retrieval_ref)
);


CREATE INDEX idx_payments_user_id ON public.payments(user_id);
CREATE INDEX idx_payments_status  ON public.payments(status);


CREATE OR REPLACE FUNCTION set_payments_updated_at()
RETURNS trigger AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_payments_updated_at ON public.payments;
CREATE TRIGGER trg_payments_updated_at
BEFORE UPDATE ON public.payments
FOR EACH ROW EXECUTE FUNCTION set_payments_updated_at();

COMMIT;
