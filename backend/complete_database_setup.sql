-- =====================================================
-- COMPLETE DATABASE SETUP FOR POLYFINTECH 2025A
-- =====================================================
-- This script creates all required tables with proper columns,
-- indexes, constraints, and triggers for the EazyGame application.
-- Run this script to set up the database on any new PC.
-- =====================================================

-- Start transaction
BEGIN;

-- =====================================================
-- 1. USERS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.users (
  id             integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username       varchar(50)  NOT NULL,
  password_hash  varchar(255) NOT NULL,
  CONSTRAINT users_username_key UNIQUE (username)
);

-- =====================================================
-- 2. CARDS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.cards (
  id       integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id  integer NOT NULL
           REFERENCES public.users(id) ON DELETE CASCADE,
  number   varchar(19)  NOT NULL,            -- card number as text
  holder   varchar(100) NOT NULL,            -- cardholder name
  expiry   varchar(5)   NOT NULL,            -- MM/YY
  balance  numeric(12,2) NOT NULL DEFAULT 0, -- SGD balance
  design   varchar(50)  NOT NULL DEFAULT 'netscard1'
);

CREATE INDEX IF NOT EXISTS idx_cards_user_id ON public.cards(user_id);

-- =====================================================
-- 3. TRANSACTIONS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.transactions (
  id        integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id   integer REFERENCES public.users(id) ON DELETE CASCADE, -- Track which user made the transaction
  card_id   integer REFERENCES public.cards(id) ON DELETE CASCADE, -- Allow NULL for external payments
  name      varchar(100) NOT NULL,
  "time"    timestamp without time zone NOT NULL DEFAULT NOW(),
  amount    numeric(12,2) NOT NULL,
  type      varchar(10)  NOT NULL,                 -- 'income' | 'expense'
  CONSTRAINT transactions_type_chk    CHECK (type IN ('income','expense')),
  CONSTRAINT transactions_amount_pos  CHECK (amount >= 0)
);

CREATE INDEX IF NOT EXISTS idx_tx_user_time ON public.transactions(user_id, "time");
CREATE INDEX IF NOT EXISTS idx_tx_card_time ON public.transactions(card_id, "time");
CREATE INDEX IF NOT EXISTS idx_tx_type      ON public.transactions(type);
CREATE INDEX IF NOT EXISTS idx_tx_time      ON public.transactions("time");

-- =====================================================
-- 4. PAYMENTS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.payments (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id          integer REFERENCES public.users(id) ON DELETE SET NULL,
  txn_id           varchar(255) NOT NULL,            -- e.g. sandbox_nets|...
  retrieval_ref    varchar(255) NOT NULL,            -- e.g. jkaej0nvvjj_...
  amount           numeric(10,2) NOT NULL DEFAULT 0, -- shows (10,2) in UI
  payment_method   varchar(50)  NOT NULL,            -- ENETS / ENETS_QR / etc
  status           varchar(50)  NOT NULL DEFAULT 'pending',
  items            jsonb,                             -- optional payload
  created_at       timestamp without time zone NOT NULL DEFAULT NOW(),
  updated_at       timestamp without time zone NOT NULL DEFAULT NOW(),
  CONSTRAINT payments_txn_id_unique        UNIQUE (txn_id),
  CONSTRAINT payments_retrieval_ref_unique UNIQUE (retrieval_ref)
);

CREATE INDEX IF NOT EXISTS idx_payments_user_id ON public.payments(user_id);
CREATE INDEX IF NOT EXISTS idx_payments_status  ON public.payments(status);

-- =====================================================
-- 5. CHECK_INS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.check_ins (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id          integer NOT NULL
                   REFERENCES public.users(id) ON DELETE CASCADE,
  last_check_in    timestamp without time zone NULL,
  current_streak   integer NOT NULL DEFAULT 0,
  total_check_ins  integer NOT NULL DEFAULT 0,
  created_at       timestamp without time zone NOT NULL DEFAULT NOW(),
  updated_at       timestamp without time zone NOT NULL DEFAULT NOW(),
  CONSTRAINT check_ins_user_unique UNIQUE (user_id) -- one row per user
);

CREATE INDEX IF NOT EXISTS idx_check_ins_user_id ON public.check_ins(user_id);

-- =====================================================
-- 6. GAME_STATS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.game_stats (
  id                    integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id               integer NOT NULL
                         REFERENCES public.users(id) ON DELETE CASCADE,
  game_type             varchar(50) NOT NULL,             -- e.g. 'candy-crush'
  games_played          integer NOT NULL DEFAULT 0,
  wins                  integer NOT NULL DEFAULT 0,
  best_score            integer NOT NULL DEFAULT 0,
  total_credits_earned  integer NOT NULL DEFAULT 0,
  created_at            timestamp without time zone NOT NULL DEFAULT NOW(),
  updated_at            timestamp without time zone NOT NULL DEFAULT NOW(),
  CONSTRAINT game_stats_user_game_unique UNIQUE (user_id, game_type)
);

CREATE INDEX IF NOT EXISTS idx_game_stats_user_id   ON public.game_stats(user_id);
CREATE INDEX IF NOT EXISTS idx_game_stats_game_type ON public.game_stats(game_type);

-- =====================================================
-- 7. VOUCHERS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.vouchers (
  id           integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id      integer NOT NULL
               REFERENCES public.users(id) ON DELETE CASCADE,
  quantity     integer NOT NULL DEFAULT 0,
  total_earned integer NOT NULL DEFAULT 0,
  total_used   integer NOT NULL DEFAULT 0,
  created_at   timestamp WITHOUT TIME ZONE NOT NULL DEFAULT now(),
  updated_at   timestamp WITHOUT TIME ZONE NOT NULL DEFAULT now(),
  CONSTRAINT vouchers_nonneg_ck
    CHECK (quantity >= 0 AND total_earned >= 0 AND total_used >= 0),
  CONSTRAINT vouchers_user_unique UNIQUE (user_id)
);

-- =====================================================
-- 8. VOUCHER_TRANSACTIONS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.voucher_transactions (
  id               integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id          integer NOT NULL
                   REFERENCES public.users(id) ON DELETE CASCADE,
  transaction_type varchar(20) NOT NULL,           -- 'earned' | 'used'
  quantity         integer NOT NULL DEFAULT 0,
  credits_used     integer NOT NULL DEFAULT 0,
  payment_id       integer
                   REFERENCES public.payments(id) ON DELETE SET NULL,
  created_at       timestamp WITHOUT TIME ZONE NOT NULL DEFAULT now(),
  CONSTRAINT voucher_transactions_type_ck
    CHECK (transaction_type IN ('earned','used'))
);

CREATE INDEX IF NOT EXISTS idx_vt_user_id     ON public.voucher_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_vt_payment_id  ON public.voucher_transactions(payment_id);
CREATE INDEX IF NOT EXISTS idx_vt_created_at  ON public.voucher_transactions(created_at);

-- =====================================================
-- 9. NFC_TRANSACTIONS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS public.nfc_transactions (
  id              integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sender_email    varchar(255) NOT NULL,
  recipient_email varchar(255) NOT NULL,
  amount          decimal(10,2) NOT NULL,
  card_id         integer REFERENCES public.cards(id),
  timestamp       timestamp DEFAULT CURRENT_TIMESTAMP,
  status          varchar(20) DEFAULT 'pending', -- 'pending', 'sent', 'received', 'cancelled'
  created_at      timestamp DEFAULT CURRENT_TIMESTAMP,
  updated_at      timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_nfc_transactions_sender ON public.nfc_transactions(sender_email);
CREATE INDEX IF NOT EXISTS idx_nfc_transactions_recipient ON public.nfc_transactions(recipient_email);
CREATE INDEX IF NOT EXISTS idx_nfc_transactions_status ON public.nfc_transactions(status);
CREATE INDEX IF NOT EXISTS idx_nfc_transactions_timestamp ON public.nfc_transactions(timestamp);

-- =====================================================
-- TRIGGERS AND FUNCTIONS
-- =====================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION public.set_timestamp()
RETURNS trigger LANGUAGE plpgsql AS $fn$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END
$fn$;

-- Function for check_ins updated_at
CREATE OR REPLACE FUNCTION set_check_ins_updated_at()
RETURNS trigger AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function for game_stats updated_at
CREATE OR REPLACE FUNCTION set_game_stats_updated_at()
RETURNS trigger AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function for payments updated_at
CREATE OR REPLACE FUNCTION set_payments_updated_at()
RETURNS trigger AS $$
BEGIN
  NEW.updated_at := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- CREATE TRIGGERS
-- =====================================================

-- Vouchers trigger
DROP TRIGGER IF EXISTS trg_vouchers_set_timestamp ON public.vouchers;
CREATE TRIGGER trg_vouchers_set_timestamp
BEFORE UPDATE ON public.vouchers
FOR EACH ROW EXECUTE FUNCTION public.set_timestamp();

-- Check_ins trigger
DROP TRIGGER IF EXISTS trg_check_ins_updated_at ON public.check_ins;
CREATE TRIGGER trg_check_ins_updated_at
BEFORE UPDATE ON public.check_ins
FOR EACH ROW EXECUTE FUNCTION set_check_ins_updated_at();

-- Game_stats trigger
DROP TRIGGER IF EXISTS trg_game_stats_updated_at ON public.game_stats;
CREATE TRIGGER trg_game_stats_updated_at
BEFORE UPDATE ON public.game_stats
FOR EACH ROW EXECUTE FUNCTION set_game_stats_updated_at();

-- Payments trigger
DROP TRIGGER IF EXISTS trg_payments_updated_at ON public.payments;
CREATE TRIGGER trg_payments_updated_at
BEFORE UPDATE ON public.payments
FOR EACH ROW EXECUTE FUNCTION set_payments_updated_at();

-- =====================================================
-- COMMIT TRANSACTION
-- =====================================================
COMMIT;

-- =====================================================
-- VERIFICATION QUERIES
-- =====================================================
-- Uncomment these to verify the setup:

-- SELECT 'Tables created successfully:' as status;
-- SELECT table_name FROM information_schema.tables 
-- WHERE table_schema = 'public' 
-- ORDER BY table_name;

-- SELECT 'Indexes created successfully:' as status;
-- SELECT indexname, tablename FROM pg_indexes 
-- WHERE schemaname = 'public' 
-- ORDER BY tablename, indexname;

-- SELECT 'Foreign key constraints:' as status;
-- SELECT tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name 
-- FROM information_schema.table_constraints AS tc 
-- JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
-- JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name
-- WHERE tc.constraint_type = 'FOREIGN KEY' AND tc.table_schema = 'public';

-- =====================================================
-- END OF SCRIPT
-- =====================================================
